diff -rupN groundHOG_v1.1_b/cudaHOG/cudaHOG.cpp libcudaHOG/cudaHOG/cudaHOG.cpp
--- groundHOG_v1.1_b/cudaHOG/cudaHOG.cpp	2012-07-10 09:27:01.000000000 +0100
+++ libcudaHOG/cudaHOG/cudaHOG.cpp	2014-07-18 15:15:24.573649799 +0100
@@ -47,6 +47,14 @@ float	HOG_SCALE_STEP = 1.05f;
 
 namespace cudaHOG {
 
+struct Exception {};
+
+template <typename X, typename A>
+inline void Assert(A assertion)
+{
+    if( !assertion ) throw X();
+}
+
 Parameters g_params;
 std::vector<ROI> g_roi;
 
@@ -122,14 +130,19 @@ int cudaHOGManager::read_params_file(std
 	return g_params.load_from_file(fnParams);
 }
 
+int cudaHOGManager::set_params(std::string& name, std::string& path, int hog_window_width, int hog_window_height, int hog_descritpor_width, int hog_descriptor_height) {
+    g_params.models.clear();
+    return g_params.set_parameters(name, path, hog_window_width, hog_window_height, hog_descritpor_width, hog_descriptor_height);
+}
+
 int cudaHOGManager::load_svm_models()
 {
-	assert(g_params.path.size() > 0 );
+    Assert<Exception>(g_params.path.size() > 0 );
 
 	printf("# models: %d\n", g_params.models.size());
 
 	for(size_t ii=0; ii < g_params.models.size(); ii++ ) {
-		assert(g_params.models[ii].identifier.size() > 0 );
+        Assert<Exception>(g_params.models[ii].identifier.size() > 0 );
 
 		string fnModel;
 		if( g_params.models[ii].filename.length() > 0 )
@@ -387,9 +400,9 @@ void compute_y_solution(float left, floa
 	float x = left;
 	float p = (E(1,0) * x + E(2,1) ) / E(1,1);
 
-	assert( p*p >= ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) ));
-	assert( E(1,1) != 0.f );
-    assert( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)) >= 0 );
+    Assert<Exception>( p*p >= ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) ));
+    Assert<Exception>( E(1,1) != 0.f );
+    Assert<Exception>( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)) >= 0 );
 
 	float root = sqrtf( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)));
 	yl_0 = -p + root;
@@ -408,7 +421,7 @@ void compute_y_solution(float left, floa
 	x = right;
 	p = (E(1,0) * x + E(2,1) ) / E(1,1);
 
-    assert( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)) >= 0 );
+    Assert<Exception>( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)) >= 0 );
 
 	root = sqrtf( p*p - ((E(0,0)*x + E(2,2) + 2*E(2,0)*x) / E(1,1)));
 	yr_0 = -p + root;
@@ -497,7 +510,7 @@ int cudaHOGManager::compute_roi_one_scal
 	min_y = min( max_height_y_l, max_height_y_r);
 	max_y = max( min_height_y_l, min_height_y_r);
 
-	assert( min_y <= max_y );
+    Assert<Exception>( min_y <= max_y );
 	if( min_y > max_y ) {
 		// invalid ROI
 		min_x =INT_MAX; min_y =INT_MAX; max_x =INT_MIN; max_y =INT_MIN;
@@ -759,9 +772,9 @@ int cudaHOGManager::features_to_file(vec
 		sOutput.write((char*)&(features[i].target), sizeof(float));
 		for(size_t j=0; j < features[i].values.size(); j++) {
 #ifdef WIN32
-			assert(! _isnan(features[i].values[j]) );
+            Assert<Exception>(! _isnan(features[i].values[j]) );
 #else
-			assert(! isnan(features[i].values[j]) );
+            Assert<Exception>(! isnan(features[i].values[j]) );
 #endif
 			sOutput.write((char*)&(features[i].values[j]), sizeof(float));
 		}
@@ -822,7 +835,10 @@ int cudaHOGManager::test_image(Detection
 
 	int res = test_image(all_dets);
 
-	detections = all_dets[0];
+    if(all_dets.size() > 0)
+        detections = all_dets[0];
+
+
 
 	return res;
 }
@@ -845,9 +861,10 @@ int cudaHOGManager::test_image(MultiDete
 
 	int res =  hog_process_image_multiscale(imgWidth, imgHeight, g_roi, &cntBlocks, &cntSVM, timings, detections);
 	release_image();
-
-	printf("HOG Blocks: %d\n", cntBlocks);
-	printf("SVM evaluations: %d\n", cntSVM);
+    if( PRINT_DEBUG_INFO ) {
+        printf("HOG Blocks: %d\n", cntBlocks);
+        printf("SVM evaluations: %d\n", cntSVM);
+    }
 
 	if( res )
 		return 1;
@@ -1052,7 +1069,7 @@ int cudaHOGManager::dump_hard_features(v
 
 			// only one model should be loaded!
 			// we only want results from this one model!
-			assert(tmp_false_positives.size() == 1 );
+            Assert<Exception>(tmp_false_positives.size() == 1 );
 
 			for(size_t jj=0; jj < tmp_false_positives[0].size(); jj++) {
 				FalsePositive fp;
diff -rupN groundHOG_v1.1_b/cudaHOG/cudaHOG.h libcudaHOG/cudaHOG/cudaHOG.h
--- groundHOG_v1.1_b/cudaHOG/cudaHOG.h	2012-07-10 09:27:01.000000000 +0100
+++ libcudaHOG/cudaHOG/cudaHOG.h	2014-07-18 15:09:50.525641521 +0100
@@ -77,8 +77,9 @@ public:
 	~cudaHOGManager();
 
 	int read_params_file(std::string& fnParams);
+    int set_params(std::string& name, std::string& path, int hog_window_width, int hog_window_height, int hog_descritpor_width, int hog_descriptor_height);
 	int load_svm_models();
-	int set_active_model(std::string& modelIdentifier);
+    int set_active_model(std::string& modelIdentifier);
 
 // Preparation
 	// initialize SVM model for classification
diff -rupN groundHOG_v1.1_b/cudaHOG/parameters.cpp libcudaHOG/cudaHOG/parameters.cpp
--- groundHOG_v1.1_b/cudaHOG/parameters.cpp	2012-07-10 09:27:01.000000000 +0100
+++ libcudaHOG/cudaHOG/parameters.cpp	2014-07-18 12:26:23.569398482 +0100
@@ -217,6 +217,25 @@ int Parameters::load_from_file(std::stri
 	return 0;
 }
 
+int Parameters::set_parameters(std::string& name, std::string& file_path, int hog_window_width, int hog_window_height, int hog_descritpor_width, int hog_descriptor_height)
+{
+    printf("retreiving Parameters from server\n");
+
+    ModelParameters m;
+    m.identifier = name;
+    printf("new ModelParameters object: %s\n", m.identifier.c_str());
+    models.push_back(m);
+
+    ModelParameters& model = models[models.size()-1];
+    model.HOG_DESCRIPTOR_HEIGHT = hog_descriptor_height;
+    model.HOG_DESCRIPTOR_WIDTH = hog_descritpor_width;
+    model.HOG_WINDOW_HEIGHT = hog_window_height;
+    model.HOG_WINDOW_WIDTH = hog_window_width;
+    path = file_path;
+
+    return 0;
+}
+
 int ModelParameters::dimension()
 {
 	return HOG_DESCRIPTOR_HEIGHT * HOG_DESCRIPTOR_WIDTH * NBINS * HOG_BLOCK_CELLS_X * HOG_BLOCK_CELLS_Y;
diff -rupN groundHOG_v1.1_b/cudaHOG/parameters.h libcudaHOG/cudaHOG/parameters.h
--- groundHOG_v1.1_b/cudaHOG/parameters.h	2012-07-10 09:27:01.000000000 +0100
+++ libcudaHOG/cudaHOG/parameters.h	2014-07-18 12:24:25.945395568 +0100
@@ -58,6 +58,7 @@ class Parameters
 
 public:
 	int load_from_file(std::string& fn);
+    int set_parameters(std::string& name, std::string& file_path, int hog_window_width, int hog_window_height, int hog_descritpor_width, int hog_descriptor_height);
 	std::string path;		// path to the files (model&config)
 
 // parameters for each model
